<?php

/**
 * @file
 * Views plugin handler. Contains all relevant options and related logic.
 * Implements the Views Form API.
 */
class views_nested_accordion_plugin_display_extender extends views_accordion_style_plugin {

  /**
   * Returns setting options.
   */
  function option_definition() {
    // Call parent method so that default functionality not override.
    $options = parent::option_definition();
    $options['nestedaccordion'] = array('default' => 0);
    return $options;
  }

  /**
   * Provide the default form for setting options.
   */
  function options_form(&$form, &$form_state) {
    //Call parent method so that default functionality not override.
    parent::options_form($form, $form_state);
    $form['nestedaccordion'] = array(
      '#type' => 'checkbox',
      '#title' => t('Nested Accordion'),
      '#default_value' => $this->options['nestedaccordion'],
      '#description' => t("If set, nested accordion will be implemented."),
    );
  }

  /**
   * Perform any necessary changes to the form values prior to storage.
   * There is no need for this function to actually store the data.
   
  function options_submit(&$form, &$form_state) {
    //Call parent method so that default functionality not override.
    parent::options_submit($form, $form_state);
    $vbo_hide = isset($form_state['values']['vbo_hide']) ? $form_state['values']['vbo_hide'] : 0;
    //If no value in any how for VBO hide, then will store 0.
    switch ($form_state['section']) {
      case 'vbo_hide':
        $this->display->set_option('vbo_hide', $vbo_hide);
        break;
    }
  }*/

  public function pre_render($result) {
    drupal_add_library('system', 'ui.accordion');
    drupal_add_js(drupal_get_path('module', 'views_nested_accordion') . 'js/views_nested_accordion.js');
    // No need do anything if we are using the grouped field as the header.
    if ($this->options['use-grouping-header']) {
      return;
    }
    // Find out about the header field options.
    $fields = array_values($this->display->handler->get_option('fields'));
    $header_class = 'views-accordion-header';
    // Add header class to first not-excluded field.
    foreach ($fields as $field) {
      if (!isset($field['exclude']) || ($field['exclude'] == 0)) {
        // Setup our wrapper class.
        // If the user configured its own class, set that up with our own class.
        if (!empty($field['element_wrapper_class'])) {
          $header_wrapper_class = $field['element_wrapper_class'] . ' ' . $header_class;
        }
        // Otherwise use our own class only.
        else {
          $header_wrapper_class = $header_class;
        }
        // Setup the view to use our processed wrapper class.
        $this->view->field[$field['id']]->options['element_wrapper_class'] = $header_wrapper_class;

        // Make sure we are using a div for markup at least.
        if (empty($field['element_wrapper_type'])) {
          $this->view->field[$field['id']]->options['element_wrapper_type'] = 'div';
        }
        break;
      }
    }
  }

  /**
   * Render the display in this style.
   */
  public function render() {
    $output = '';
    // Prevent errors if users select content instead of fields as row style.
    // This forces them to use field as row style, no other way that I can think of.
    if (parent::uses_fields()) {
      $output = parent::render();
    }
    else {
      drupal_set_message('Views accordion requires Fields as row style', 'error');
    }

    if ($this->options['disableifone'] == '1') {
      if (count($this->rendered_fields) < 2) {
        return $output;
      }
    }

    // dpm($this->display->handler->get_option('fields')); // for dev-troubleshooting

    // Add the appropiate effect library if necessary.
    $effect = $this->options['animated'];
    if (($effect !== 'none') && ($effect !== 'slide')) {
      // For now we only use ui core effects library, which provides the easing effects.
      // This switch is left here in case we actualy need to load any other libraries.
      switch ($effect) {
          default:
            $library = 'effects';
            break;
      }
      if (isset($library)) {
        drupal_add_library('system', 'effects');
      }
    }

    // Preparing the js variables and adding the js to our display
    // we do it here so we dont have it run once every group.
    $view_settings['collapsible'] = $this->options['collapsible'];

    // The +0 forces it to add it as an integrer instead of a string - ugly hack?
    $view_settings['rowstartopen'] = ($this->options['row-start-open'] == 'none') ? FALSE : $this->options['row-start-open'] + 0;
    $view_settings['animated'] = ($this->options['animated'] == 'none') ? FALSE : $this->options['animated'];
    $view_settings['autoheight'] = $this->options['autoheight'];
    $view_settings['event'] = $this->options['event'];
    $view_settings['fillspace'] = $this->options['fillspace'];
    $view_settings['navigation'] = $this->options['navigation'];
    $view_settings['clearstyle'] = $this->options['clearstyle'];
    $view_settings['nestedaccordion'] = $this->options['nestedaccordion'];  //Anil
    $view_settings['grouping'] = $this->options['grouping'] ? 1 : 0;

    $view_settings['display'] = $this->view->current_display;
    $view_settings['viewname'] = $this->view->name;
    $view_settings['usegroupheader'] = $view_settings['grouping'] ? $this->options['use-grouping-header'] : 0;

    $accordion_id = 'views-accordion-' . $this->view->name .'-' . $this->view->current_display;

    if ($view_settings['usegroupheader'] == 1) {
      $view_settings['header'] = 'h3.' . $accordion_id . '-header';
    }

    // Used to get the first field to be used as the accordion header.
    if ($view_settings['usegroupheader'] == 0) {
      $view_settings['header'] = '.views-accordion-header';
    }

    drupal_add_js(array('views_accordion' => array($accordion_id => $view_settings)), 'setting');
    //print_r($view_settings);die;
    return $output;
  }
}


